services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: plane-postgres
    environment:
      POSTGRES_DB: plane
      POSTGRES_USER: plane
      POSTGRES_PASSWORD: plane
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - plane-network
    restart: "on-failure:2"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: plane-redis
    networks:
      - plane-network
    restart: "on-failure:2"

  # MinIO (파일 저장소)
  minio:
    image: minio/minio:latest
    container_name: plane-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    networks:
      - plane-network
    restart: "on-failure:2"

  # Plane Backend
  plane-backend:
    image: makeplane/plane-backend:latest
    container_name: plane-backend
    environment:
      - DATABASE_URL=postgresql://plane:plane@postgres:5432/plane
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=4D3ECC83-24D0-42D5-A290-E0954E26E007
      - DEBUG=0
      - SENTRY_DSN=""
      - CORS_ALLOWED_ORIGINS=http://localhost:52030
      - WEB_URL=http://localhost:52030
      - ENABLE_SIGNUP=1
      - EMAIL_HOST=""
      - EMAIL_HOST_USER=""
      - EMAIL_HOST_PASSWORD=""
      - EMAIL_PORT=587
      - EMAIL_USE_TLS=1
      - DEFAULT_FROM_EMAIL=jslee7518@gmail.com
      # 파일 업로드 설정
      - USE_MINIO=1
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_BUCKET_NAME=uploads
      - AWS_REGION=us-east-1
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - plane-network
    restart: "on-failure:2"

  # Plane Frontend
  plane-frontend:
    image: makeplane/plane-frontend:latest
    container_name: plane-frontend
    ports:
      - "52030:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:52031
      - NEXT_PUBLIC_WEBAPP_URL=http://localhost:52030
    depends_on:
      - plane-backend
    networks:
      - plane-network
    restart: "on-failure:2"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: plane-nginx
    ports:
      - "52031:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - plane-backend
    networks:
      - plane-network
    restart: "on-failure:2"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /volume4/warehouse/plane/postgres-data
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /volume4/warehouse/plane/minio-data

networks:
  plane-network:
    driver: bridge
